var azure = require('azure-storage');
var CloudDataConnector;
(function (CloudDataConnector) {
    var AzureTableStorageService = (function () {
        function AzureTableStorageService() {
            this.tableNames = new Array();
        }
        AzureTableStorageService.prototype.addSource = function (accountName, secretKey, tableNames) {
            console.log("source added")
            this.azureClient = azure.createTableService(accountName, secretKey);
            this.tableNames = tableNames;
        };
        // the callback is called with an array of objects { tableName: <tableName>, table: <array> }
        AzureTableStorageService.prototype.get = function (updateCallback, lastSyncDates) {
            this.dataAvailableCallback = updateCallback;
            var count = 0;
            var total = this.tableNames.length;
            var tableName;
            for (var x = 0; x < total; x++) {
                tableName = this.tableNames[x];
                var lastSyncDate = lastSyncDates[tableName];
                this._getTable(tableName, function (resultElement) {
                    count++;
                    updateCallback([resultElement]);
                    if (count === total) {
                    } //!+ request is finished.  Might be interesting to have a callback to top level code called at this point.
                }, lastSyncDate);
            }
        };
        AzureTableStorageService.prototype._getTable = function (tableName, callback, lastDate) {
            var query = new azure.TableQuery();
            this.azureClient.queryEntities(tableName, query, null, function (error, result, response) {
                for (var i = 0; i < result.entries.length; i++) {
                    result.entries[i].id = result.entries[i].id._
    //var item = {};
    //                Object.keys(result.entries[i]).forEach(function (key) {
    //                    if (key == ".metadata") {
    //                        item.metadata = result.entries[i][key].etag;
    //                    }
    //                    else {
    //                        item[key] = result.entries[i][key]._;
    //                    }
    //                });
    //                r.push(item);
                }
                var result = { 'tableName': tableName, 'table': result.entries };
                callback(result);
            });
        }
        AzureTableStorageService.prototype.remove = function (tableName, entity, onsuccess, onerror) {
            this.azureClient.deleteEntity(tableName, entity, function (error) {
                if (error) {
                    onerror();
                }
                else
                    onsuccess();
            })
        };
        AzureTableStorageService.prototype.update = function (tableName, entity, onsuccess, onerror) {
            var uEntity = {};
            if (typeof entity.id === "string") {
                entity.id = azure.TableUtilities.entityGenerator.String(entity.id);
            }
            this.azureClient.updateEntity(tableName, entity, function (error) {
                if (!error) {
                    onsuccess();
                }
                else { onerror(); }
            });
        };
        AzureTableStorageService.prototype.add = function (tableName, entity, onsuccess, onerror) {
            this.azureClient.insertEntity(tableName, entity, function (error, result, response) {
                if (!error) {
                    onsuccess();
                }
                else {
                    onerror();
                }
            });
        };
        return AzureTableStorageService;
    })();
    CloudDataConnector.AzureTableStorageService = AzureTableStorageService;
})(CloudDataConnector || (CloudDataConnector = {}));